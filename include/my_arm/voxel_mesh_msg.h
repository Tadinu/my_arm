// Generated by gencpp from file my_arm/voxel_mesh.msg
// DO NOT EDIT!


#ifndef MY_ARM_MESSAGE_VOXEL_MESH_H
#define MY_ARM_MESSAGE_VOXEL_MESH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <voxel_mesh_msgs/facet.h>
#include <voxel_mesh_msgs/vertex.h>
#include <voxel_mesh_msgs/edge.h>

namespace my_arm
{
template <class ContainerAllocator>
struct voxel_mesh_
{
  typedef voxel_mesh_<ContainerAllocator> Type;

  voxel_mesh_()
    : header()
    , facets()
    , vertices()
    , edges()  {
    }
  voxel_mesh_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , facets(_alloc)
    , vertices(_alloc)
    , edges(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::voxel_mesh_msgs::facet_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::voxel_mesh_msgs::facet_<ContainerAllocator> >::other >  _facets_type;
  _facets_type facets;

   typedef std::vector< ::voxel_mesh_msgs::vertex_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::voxel_mesh_msgs::vertex_<ContainerAllocator> >::other >  _vertices_type;
  _vertices_type vertices;

   typedef std::vector< ::voxel_mesh_msgs::edge_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::voxel_mesh_msgs::edge_<ContainerAllocator> >::other >  _edges_type;
  _edges_type edges;




  typedef boost::shared_ptr< ::my_arm::voxel_mesh_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_arm::voxel_mesh_<ContainerAllocator> const> ConstPtr;

}; // struct voxel_mesh_

typedef ::my_arm::voxel_mesh_<std::allocator<void> > voxel_mesh;

typedef boost::shared_ptr< ::my_arm::voxel_mesh > voxel_meshPtr;
typedef boost::shared_ptr< ::my_arm::voxel_mesh const> voxel_meshConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_arm::voxel_mesh_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_arm::voxel_mesh_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_arm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'my_arm': ['/home/brhm/DUC/RobotArm/src/my_arm/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'object_recognition_msgs': ['/opt/ros/kinetic/share/object_recognition_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'voxel_mesh_msgs': ['/home/brhm/DUC/RobotArm/src/voxel_mesh_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_arm::voxel_mesh_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_arm::voxel_mesh_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_arm::voxel_mesh_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_arm::voxel_mesh_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_arm::voxel_mesh_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_arm::voxel_mesh_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_arm::voxel_mesh_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f0d0d2fe3869dfaf406b6ae73b4ccb22";
  }

  static const char* value(const ::my_arm::voxel_mesh_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf0d0d2fe3869dfafULL;
  static const uint64_t static_value2 = 0x406b6ae73b4ccb22ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_arm::voxel_mesh_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_arm/voxel_mesh";
  }

  static const char* value(const ::my_arm::voxel_mesh_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_arm::voxel_mesh_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
voxel_mesh_msgs/facet[] facets\n\
voxel_mesh_msgs/vertex[] vertices\n\
voxel_mesh_msgs/edge[] edges\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: voxel_mesh_msgs/facet\n\
Header header\n\
geometry_msgs/Vector3 normal\n\
int32 vi0\n\
int32 vi1\n\
int32 vi2\n\
string name\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: voxel_mesh_msgs/vertex\n\
Header header\n\
geometry_msgs/Vector3 normal\n\
geometry_msgs/Vector3 vertex\n\
geometry_msgs/Vector3 offset\n\
\n\
================================================================================\n\
MSG: voxel_mesh_msgs/edge\n\
Header header\n\
int32 vi0\n\
int32 vi1\n\
";
  }

  static const char* value(const ::my_arm::voxel_mesh_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_arm::voxel_mesh_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.facets);
      stream.next(m.vertices);
      stream.next(m.edges);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct voxel_mesh_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_arm::voxel_mesh_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_arm::voxel_mesh_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "facets[]" << std::endl;
    for (size_t i = 0; i < v.facets.size(); ++i)
    {
      s << indent << "  facets[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::voxel_mesh_msgs::facet_<ContainerAllocator> >::stream(s, indent + "    ", v.facets[i]);
    }
    s << indent << "vertices[]" << std::endl;
    for (size_t i = 0; i < v.vertices.size(); ++i)
    {
      s << indent << "  vertices[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::voxel_mesh_msgs::vertex_<ContainerAllocator> >::stream(s, indent + "    ", v.vertices[i]);
    }
    s << indent << "edges[]" << std::endl;
    for (size_t i = 0; i < v.edges.size(); ++i)
    {
      s << indent << "  edges[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::voxel_mesh_msgs::edge_<ContainerAllocator> >::stream(s, indent + "    ", v.edges[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_ARM_MESSAGE_VOXEL_MESH_H
