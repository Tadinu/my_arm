// Generated by gencpp from file voxel_mesh_msgs/vertex.msg
// DO NOT EDIT!


#ifndef VOXEL_MESH_MSGS_MESSAGE_VERTEX_H
#define VOXEL_MESH_MSGS_MESSAGE_VERTEX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace voxel_mesh_msgs
{
template <class ContainerAllocator>
struct vertex_
{
  typedef vertex_<ContainerAllocator> Type;

  vertex_()
    : header()
    , normal()
    , vertex()
    , offset()
    , color()  {
      color.assign(0.0);
  }
  vertex_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , normal(_alloc)
    , vertex(_alloc)
    , offset(_alloc)
    , color()  {
  (void)_alloc;
      color.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _normal_type;
  _normal_type normal;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _vertex_type;
  _vertex_type vertex;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _offset_type;
  _offset_type offset;

   typedef boost::array<float, 4>  _color_type;
  _color_type color;




  typedef boost::shared_ptr< ::voxel_mesh_msgs::vertex_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::voxel_mesh_msgs::vertex_<ContainerAllocator> const> ConstPtr;

}; // struct vertex_

typedef ::voxel_mesh_msgs::vertex_<std::allocator<void> > vertex;

typedef boost::shared_ptr< ::voxel_mesh_msgs::vertex > vertexPtr;
typedef boost::shared_ptr< ::voxel_mesh_msgs::vertex const> vertexConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::voxel_mesh_msgs::vertex_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::voxel_mesh_msgs::vertex_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace voxel_mesh_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'object_recognition_msgs': ['/opt/ros/kinetic/share/object_recognition_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'voxel_mesh_msgs': ['/home/brhm/DUC/RobotArm/src/voxel_mesh_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::voxel_mesh_msgs::vertex_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voxel_mesh_msgs::vertex_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voxel_mesh_msgs::vertex_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voxel_mesh_msgs::vertex_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voxel_mesh_msgs::vertex_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voxel_mesh_msgs::vertex_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::voxel_mesh_msgs::vertex_<ContainerAllocator> >
{
  static const char* value()
  {
    return "18169d315b228c38d434260c58431303";
  }

  static const char* value(const ::voxel_mesh_msgs::vertex_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x18169d315b228c38ULL;
  static const uint64_t static_value2 = 0xd434260c58431303ULL;
};

template<class ContainerAllocator>
struct DataType< ::voxel_mesh_msgs::vertex_<ContainerAllocator> >
{
  static const char* value()
  {
    return "voxel_mesh_msgs/vertex";
  }

  static const char* value(const ::voxel_mesh_msgs::vertex_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::voxel_mesh_msgs::vertex_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
geometry_msgs/Vector3 normal\n\
geometry_msgs/Vector3 vertex\n\
geometry_msgs/Vector3 offset\n\
float32[4] color\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::voxel_mesh_msgs::vertex_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::voxel_mesh_msgs::vertex_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.normal);
      stream.next(m.vertex);
      stream.next(m.offset);
      stream.next(m.color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct vertex_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::voxel_mesh_msgs::vertex_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::voxel_mesh_msgs::vertex_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "normal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.normal);
    s << indent << "vertex: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.vertex);
    s << indent << "offset: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.offset);
    s << indent << "color[]" << std::endl;
    for (size_t i = 0; i < v.color.size(); ++i)
    {
      s << indent << "  color[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.color[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VOXEL_MESH_MSGS_MESSAGE_VERTEX_H
