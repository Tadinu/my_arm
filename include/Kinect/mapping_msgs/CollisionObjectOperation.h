/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file c:\work\ws\mapping_msgs\msg\CollisionObjectOperation.msg
 *
 */


#ifndef MAPPING_MSGS_MESSAGE_COLLISIONOBJECTOPERATION_H
#define MAPPING_MSGS_MESSAGE_COLLISIONOBJECTOPERATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mapping_msgs
{
template <class ContainerAllocator>
struct CollisionObjectOperation_
{
  typedef CollisionObjectOperation_<ContainerAllocator> Type;

  CollisionObjectOperation_()
    : operation(0)  {
    }
  CollisionObjectOperation_(const ContainerAllocator& _alloc)
    : operation(0)  {
    }



   typedef int8_t _operation_type;
  _operation_type operation;


    enum { ADD = 0 };
     enum { REMOVE = 1 };
     enum { DETACH_AND_ADD_AS_OBJECT = 2 };
     enum { ATTACH_AND_REMOVE_AS_OBJECT = 3 };
 

  typedef boost::shared_ptr< ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct CollisionObjectOperation_

typedef ::mapping_msgs::CollisionObjectOperation_<std::allocator<void> > CollisionObjectOperation;

typedef boost::shared_ptr< ::mapping_msgs::CollisionObjectOperation > CollisionObjectOperationPtr;
typedef boost::shared_ptr< ::mapping_msgs::CollisionObjectOperation const> CollisionObjectOperationConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mapping_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometric_shapes_msgs': ['c:/work/ws/geometric_shapes_msgs/msg'], 'geometry_msgs': ['c:/work/ws/geometry_msgs/msg'], 'mapping_msgs': ['c:/work/ws/mapping_msgs/msg', 'c:/work/ws/mapping_msgs/msg'], 'std_msgs': ['c:/work/ws/std_msgs/msg'], 'sensor_msgs': ['c:/work/ws/sensor_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66a2b3b971d193145f8da8c3e401a474";
  }

  static const char* value(const ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66a2b3b971d19314ULL;
  static const uint64_t static_value2 = 0x5f8da8c3e401a474ULL;
};

template<class ContainerAllocator>
struct DataType< ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mapping_msgs/CollisionObjectOperation";
  }

  static const char* value(const ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Puts the object into the environment\n\
#or updates the object if already added\n\
byte ADD=0\n\
\n\
#Removes the object from the environment entirely\n\
byte REMOVE=1\n\
\n\
#Only valid within the context of a CollisionAttachedObject message\n\
#Will be ignored if sent with an CollisionObject message\n\
#Takes an attached object, detaches from the attached link\n\
#But adds back in as regular object\n\
byte DETACH_AND_ADD_AS_OBJECT=2\n\
\n\
#Only valid within the context of a CollisionAttachedObject message\n\
#Will be ignored if sent with an CollisionObject message\n\
#Takes current object in the environment and removes it as\n\
#a regular object\n\
byte ATTACH_AND_REMOVE_AS_OBJECT=3\n\
\n\
# Byte code for operation\n\
byte operation\n\
\n\
";
  }

  static const char* value(const ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.operation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct CollisionObjectOperation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mapping_msgs::CollisionObjectOperation_<ContainerAllocator>& v)
  {
    s << indent << "operation: ";
    Printer<int8_t>::stream(s, indent + "  ", v.operation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAPPING_MSGS_MESSAGE_COLLISIONOBJECTOPERATION_H
