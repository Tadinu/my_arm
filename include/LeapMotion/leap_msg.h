// Generated by gencpp from file my_arm/leap.msg
// DO NOT EDIT!


#ifndef MY_ARM_MESSAGE_LEAP_H
#define MY_ARM_MESSAGE_LEAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace my_arm
{
template <class ContainerAllocator>
struct leap_
{
  typedef leap_<ContainerAllocator> Type;

  leap_()
    : header()
    , hand_direction()
    , hand_normal()
    , hand_palm_pos()
    , hand_pitch(0.0)
    , hand_roll(0.0)
    , hand_yaw(0.0)  {
      hand_direction.assign(0.0);

      hand_normal.assign(0.0);

      hand_palm_pos.assign(0.0);
  }
  leap_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , hand_direction()
    , hand_normal()
    , hand_palm_pos()
    , hand_pitch(0.0)
    , hand_roll(0.0)
    , hand_yaw(0.0)  {
  (void)_alloc;
      hand_direction.assign(0.0);

      hand_normal.assign(0.0);

      hand_palm_pos.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<double, 3>  _hand_direction_type;
  _hand_direction_type hand_direction;

   typedef boost::array<double, 3>  _hand_normal_type;
  _hand_normal_type hand_normal;

   typedef boost::array<double, 3>  _hand_palm_pos_type;
  _hand_palm_pos_type hand_palm_pos;

   typedef double _hand_pitch_type;
  _hand_pitch_type hand_pitch;

   typedef double _hand_roll_type;
  _hand_roll_type hand_roll;

   typedef double _hand_yaw_type;
  _hand_yaw_type hand_yaw;




  typedef boost::shared_ptr< ::my_arm::leap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_arm::leap_<ContainerAllocator> const> ConstPtr;

}; // struct leap_

typedef ::my_arm::leap_<std::allocator<void> > leap;

typedef boost::shared_ptr< ::my_arm::leap > leapPtr;
typedef boost::shared_ptr< ::my_arm::leap const> leapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_arm::leap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_arm::leap_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_arm

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'my_arm': ['/home/brhm/DUC/RobotArm/src/my_arm/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'object_recognition_msgs': ['/opt/ros/kinetic/share/object_recognition_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'voxel_mesh_msgs': ['/home/brhm/DUC/RobotArm/src/voxel_mesh_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_arm::leap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_arm::leap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_arm::leap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_arm::leap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_arm::leap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_arm::leap_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_arm::leap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e9a0dc7fd1a98f1d7489e9011c78807";
  }

  static const char* value(const ::my_arm::leap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e9a0dc7fd1a98f1ULL;
  static const uint64_t static_value2 = 0xd7489e9011c78807ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_arm::leap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_arm/leap";
  }

  static const char* value(const ::my_arm::leap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_arm::leap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
float64[3] hand_direction\n\
float64[3] hand_normal\n\
float64[3] hand_palm_pos\n\
float64 hand_pitch\n\
float64 hand_roll\n\
float64 hand_yaw\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::my_arm::leap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_arm::leap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.hand_direction);
      stream.next(m.hand_normal);
      stream.next(m.hand_palm_pos);
      stream.next(m.hand_pitch);
      stream.next(m.hand_roll);
      stream.next(m.hand_yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct leap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_arm::leap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_arm::leap_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "hand_direction[]" << std::endl;
    for (size_t i = 0; i < v.hand_direction.size(); ++i)
    {
      s << indent << "  hand_direction[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.hand_direction[i]);
    }
    s << indent << "hand_normal[]" << std::endl;
    for (size_t i = 0; i < v.hand_normal.size(); ++i)
    {
      s << indent << "  hand_normal[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.hand_normal[i]);
    }
    s << indent << "hand_palm_pos[]" << std::endl;
    for (size_t i = 0; i < v.hand_palm_pos.size(); ++i)
    {
      s << indent << "  hand_palm_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.hand_palm_pos[i]);
    }
    s << indent << "hand_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.hand_pitch);
    s << indent << "hand_roll: ";
    Printer<double>::stream(s, indent + "  ", v.hand_roll);
    s << indent << "hand_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.hand_yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_ARM_MESSAGE_LEAP_H
